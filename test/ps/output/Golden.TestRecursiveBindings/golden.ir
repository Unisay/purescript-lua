UberModule
  { uberModuleBindings =
    [ Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestRecursiveBindings", qnameName = Name "whereRec"
        }, Let
        ( RecursiveGroup
          (
            ( Name "yes", Abs
              ( ParamNamed ( Name "v" ) )
              ( IfThenElse
                ( Prim ( Eq ( Lit ( Boolean True ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
                ( IfThenElse
                  ( Prim ( Eq ( Lit ( Boolean False ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                  ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                  ( Exception ( "No patterns matched" ) )
                )
              )
            ) :|
            [
              ( Name "no", Abs
                ( ParamNamed ( Name "v" ) )
                ( IfThenElse
                  ( Prim ( Eq ( Lit ( Boolean True ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                  ( App ( Ref ( Local ( Name "yes" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
                  ( IfThenElse
                    ( Prim ( Eq ( Lit ( Boolean False ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                    ( App ( Ref ( Local ( Name "yes" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                    ( Exception ( "No patterns matched" ) )
                  )
                )
              )
            ]
          ) :| []
        )
        ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestRecursiveBindings", qnameName = Name "letRecMixed"
        }, Let
        ( Standalone
          ( Name "z", Lit ( Integer 1 ) ) :|
          [ RecursiveGroup
            (
              ( Name "b", Abs ( ParamUnused )
                ( App ( Ref ( Local ( Name "a" ) ) ( 0 ) ) ( Ref ( Local ( Name "z" ) ) ( 0 ) ) )
              ) :|
              [
                ( Name "a", Abs ( ParamUnused )
                  ( App ( Ref ( Local ( Name "b" ) ) ( 0 ) ) ( Ref ( Local ( Name "z" ) ) ( 0 ) ) )
                )
              ]
            ), Standalone
            ( Name "f", Abs ( ParamUnused )
              ( Abs
                ( ParamNamed ( Name "k" ) )
                ( App ( Ref ( Local ( Name "a" ) ) ( 0 ) ) ( Ref ( Local ( Name "k" ) ) ( 0 ) ) )
              )
            ), Standalone
            ( Name "y", App
              ( App ( Ref ( Local ( Name "f" ) ) ( 0 ) ) ( Ref ( Local ( Name "z" ) ) ( 0 ) ) )
              ( Ref ( Local ( Name "z" ) ) ( 0 ) )
            )
          ]
        )
        ( App
          ( App
            ( Ref ( Local ( Name "f" ) ) ( 0 ) )
            ( App
              ( App ( Ref ( Local ( Name "f" ) ) ( 0 ) ) ( Ref ( Local ( Name "y" ) ) ( 0 ) ) )
              ( Ref ( Local ( Name "y" ) ) ( 0 ) )
            )
          )
          ( App
            ( App ( Ref ( Local ( Name "f" ) ) ( 0 ) ) ( Ref ( Local ( Name "y" ) ) ( 0 ) ) )
            ( Lit ( Integer 0 ) )
          )
        )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestRecursiveBindings", qnameName = Name "letRec"
        }, Let
        ( RecursiveGroup
          (
            ( Name "yes", Abs
              ( ParamNamed ( Name "v" ) )
              ( IfThenElse
                ( Prim ( Eq ( Lit ( Boolean True ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
                ( IfThenElse
                  ( Prim ( Eq ( Lit ( Boolean False ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                  ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                  ( Exception ( "No patterns matched" ) )
                )
              )
            ) :|
            [
              ( Name "no", Abs
                ( ParamNamed ( Name "v" ) )
                ( IfThenElse
                  ( Prim ( Eq ( Lit ( Boolean True ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                  ( App ( Ref ( Local ( Name "yes" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
                  ( IfThenElse
                    ( Prim ( Eq ( Lit ( Boolean False ) ) ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ) )
                    ( App ( Ref ( Local ( Name "yes" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                    ( Exception ( "No patterns matched" ) )
                  )
                )
              )
            ]
          ) :| []
        )
        ( App ( Ref ( Local ( Name "no" ) ) ( 0 ) ) ( Lit ( Boolean False ) ) )
      )
    ], uberModuleForeigns = [], uberModuleExports =
    [
      ( ModuleName "Golden.TestRecursiveBindings", Name "letRec" ),
      ( ModuleName "Golden.TestRecursiveBindings", Name "whereRec" ),
      ( ModuleName "Golden.TestRecursiveBindings", Name "letRecMixed" )
    ]
  }