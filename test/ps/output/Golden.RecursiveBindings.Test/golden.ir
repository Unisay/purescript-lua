UberModule
  { uberModuleBindings = [], uberModuleExports =
    [
      ( Name "letRec", Let Nothing
        ( RecursiveGroup
          (
            ( Nothing, Name "no", Abs Nothing
              ( ParamNamed Nothing ( Name "v" ) )
              ( IfThenElse Nothing
                ( Eq Nothing ( LiteralBool Nothing True )
                  ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                )
                ( App Nothing
                  ( Ref Nothing ( Local ( Name "yes" ) ) 0 ) ( LiteralBool Nothing False )
                )
                ( IfThenElse Nothing
                  ( Eq Nothing ( LiteralBool Nothing False )
                    ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                  )
                  ( App Nothing
                    ( Ref Nothing ( Local ( Name "yes" ) ) 0 ) ( LiteralBool Nothing True )
                  )
                  ( Exception Nothing "No patterns matched" )
                )
              )
            ) :|
            [
              ( Nothing, Name "yes", Abs Nothing
                ( ParamNamed Nothing ( Name "v" ) )
                ( IfThenElse Nothing
                  ( Eq Nothing ( LiteralBool Nothing True )
                    ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                  )
                  ( App Nothing
                    ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing False )
                  )
                  ( IfThenElse Nothing
                    ( Eq Nothing ( LiteralBool Nothing False )
                      ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                    )
                    ( App Nothing
                      ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing True )
                    )
                    ( Exception Nothing "No patterns matched" )
                  )
                )
              )
            ]
          ) :| []
        )
        ( App Nothing ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing False ) )
      ),
      ( Name "whereRec", Let Nothing
        ( RecursiveGroup
          (
            ( Nothing, Name "no", Abs Nothing
              ( ParamNamed Nothing ( Name "v" ) )
              ( IfThenElse Nothing
                ( Eq Nothing ( LiteralBool Nothing True )
                  ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                )
                ( App Nothing
                  ( Ref Nothing ( Local ( Name "yes" ) ) 0 ) ( LiteralBool Nothing False )
                )
                ( IfThenElse Nothing
                  ( Eq Nothing ( LiteralBool Nothing False )
                    ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                  )
                  ( App Nothing
                    ( Ref Nothing ( Local ( Name "yes" ) ) 0 ) ( LiteralBool Nothing True )
                  )
                  ( Exception Nothing "No patterns matched" )
                )
              )
            ) :|
            [
              ( Nothing, Name "yes", Abs Nothing
                ( ParamNamed Nothing ( Name "v" ) )
                ( IfThenElse Nothing
                  ( Eq Nothing ( LiteralBool Nothing True )
                    ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                  )
                  ( App Nothing
                    ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing False )
                  )
                  ( IfThenElse Nothing
                    ( Eq Nothing ( LiteralBool Nothing False )
                      ( Ref Nothing ( Local ( Name "v" ) ) 0 )
                    )
                    ( App Nothing
                      ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing True )
                    )
                    ( Exception Nothing "No patterns matched" )
                  )
                )
              )
            ]
          ) :| []
        )
        ( App Nothing ( Ref Nothing ( Local ( Name "no" ) ) 0 ) ( LiteralBool Nothing False ) )
      ),
      ( Name "letRecMixed", Let Nothing
        ( Standalone
          ( Nothing, Name "z", LiteralInt Nothing 1 ) :|
          [ RecursiveGroup
            (
              ( Nothing, Name "a", Ref Nothing ( Local ( Name "b" ) ) 0 ) :|
              [ ( Nothing, Name "b", Ref Nothing ( Local ( Name "a" ) ) 0 ) ]
            ), Standalone
            ( Nothing, Name "f", Abs Nothing ( ParamUnused Nothing )
              ( Ref Nothing ( Local ( Name "a" ) ) 0 )
            ), Standalone
            ( Nothing, Name "y", App Nothing
              ( App Nothing
                ( Ref Nothing ( Local ( Name "f" ) ) 0 )
                ( Ref Nothing ( Local ( Name "z" ) ) 0 )
              )
              ( Ref Nothing ( Local ( Name "z" ) ) 0 )
            )
          ]
        )
        ( App Nothing
          ( App Nothing
            ( Ref Nothing ( Local ( Name "f" ) ) 0 )
            ( App Nothing
              ( App Nothing
                ( Ref Nothing ( Local ( Name "f" ) ) 0 )
                ( Ref Nothing ( Local ( Name "y" ) ) 0 )
              )
              ( Ref Nothing ( Local ( Name "y" ) ) 0 )
            )
          )
          ( App Nothing
            ( App Nothing
              ( Ref Nothing ( Local ( Name "f" ) ) 0 )
              ( Ref Nothing ( Local ( Name "y" ) ) 0 )
            )
            ( LiteralInt Nothing 0 )
          )
        )
      )
    ]
  }