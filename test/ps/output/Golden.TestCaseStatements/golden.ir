UberModule
  { uberModuleBindings =
    [ Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestValues", qnameName = Name "f"
        }, Abs Nothing ( ParamUnused Nothing ) ( LiteralBool Nothing True )
      )
    ], uberModuleExports =
    [
      ( Name "a", LiteralInt Nothing 1 ),
      ( Name "b", LiteralChar Nothing 'b' ),
      ( Name "c", Let Nothing
        ( Standalone
          ( Nothing, Name "v", Abs Nothing ( ParamUnused Nothing ) ( LiteralInt Nothing 0 ) ) :| []
        )
        ( IfThenElse Nothing
          ( Eq Nothing ( LiteralBool Nothing True )
            ( App Nothing
              ( Ref Nothing ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) 0 )
              ( LiteralInt Nothing 2 )
            )
          )
          ( IfThenElse Nothing
            ( Eq Nothing ( LiteralBool Nothing True )
              ( App Nothing
                ( Ref Nothing ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) 0 )
                ( LiteralInt Nothing 1 )
              )
            )
            ( LiteralInt Nothing 42 )
            ( App Nothing ( Ref Nothing ( Local ( Name "v" ) ) 0 ) ( LiteralBool Nothing True ) )
          )
          ( App Nothing ( Ref Nothing ( Local ( Name "v" ) ) 0 ) ( LiteralBool Nothing True ) )
        )
      ),
      ( Name "J", Ctor Nothing SumType
        ( ModuleName "Golden.TestCaseStatements" )
        ( TyName "M" )
        ( CtorName "J" )
        [ FieldName "value0" ]
      ),
      ( Name "N", Ctor Nothing SumType
        ( ModuleName "Golden.TestCaseStatements" )
        ( TyName "M" )
        ( CtorName "N" ) []
      ),
      ( Name "d", Abs Nothing
        ( ParamNamed Nothing ( Name "m" ) )
        ( Abs Nothing
          ( ParamNamed Nothing ( Name "n" ) )
          ( Abs Nothing
            ( ParamNamed Nothing ( Name "x" ) )
            ( Let Nothing
              ( Standalone
                ( Nothing, Name "v", Abs Nothing ( ParamUnused Nothing )
                  ( IfThenElse Nothing
                    ( Eq Nothing
                      ( LiteralChar Nothing 'y' )
                      ( Ref Nothing ( Local ( Name "x" ) ) 0 )
                    )
                    ( LiteralInt Nothing 0 )
                    ( LiteralInt Nothing 1 )
                  )
                ) :| []
              )
              ( IfThenElse Nothing
                ( Eq Nothing ( LiteralChar Nothing 'x' ) ( Ref Nothing ( Local ( Name "x" ) ) 0 ) )
                ( IfThenElse Nothing
                  ( Eq Nothing
                    ( LiteralString Nothing "Golden.TestCaseStatements∷M.J" )
                    ( ReflectCtor Nothing ( Ref Nothing ( Local ( Name "m" ) ) 0 ) )
                  )
                  ( IfThenElse Nothing
                    ( Eq Nothing
                      ( LiteralString Nothing "Golden.TestCaseStatements∷M.N" )
                      ( ReflectCtor Nothing ( Ref Nothing ( Local ( Name "n" ) ) 0 ) )
                    )
                    ( ObjectProp Nothing
                      ( Ref Nothing ( Local ( Name "m" ) ) 0 )
                      ( PropName "value0" )
                    )
                    ( App Nothing
                      ( Ref Nothing ( Local ( Name "v" ) ) 0 ) ( LiteralBool Nothing True )
                    )
                  )
                  ( App Nothing
                    ( Ref Nothing ( Local ( Name "v" ) ) 0 ) ( LiteralBool Nothing True )
                  )
                )
                ( App Nothing
                  ( Ref Nothing ( Local ( Name "v" ) ) 0 ) ( LiteralBool Nothing True )
                )
              )
            )
          )
        )
      ),
      ( Name "multipleGuards", LiteralInt Nothing 1 )
    ]
  }