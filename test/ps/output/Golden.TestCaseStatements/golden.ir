UberModule
  { uberModuleBindings =
    [ Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestValues", qnameName = Name "f"
        }, Abs ( ParamUnused )
        ( Lit ( Boolean True ) )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "J"
        }, Ctor ( SumType )
        ( TyName "M" )
        ( CtorName "J" )
        ( [ FieldName "value0" ] )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "N"
        }, Ctor ( SumType )
        ( TyName "M" )
        ( CtorName "N" ) ( [] )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "multipleGuards"
        }, Lit
        ( Integer 1 )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "d" }, Abs
        ( ParamNamed ( Name "m" ) )
        ( Abs
          ( ParamNamed ( Name "n" ) )
          ( Abs
            ( ParamNamed ( Name "x" ) )
            ( Let
              ( Standalone
                ( Name "v", Abs ( ParamUnused )
                  ( IfThenElse
                    ( Prim ( Eq ( Lit ( Char 'y' ) ) ( Ref ( Local ( Name "x" ) ) ( 0 ) ) ) )
                    ( Lit ( Integer 0 ) )
                    ( Lit ( Integer 1 ) )
                  )
                ) :| []
              )
              ( IfThenElse
                ( Prim ( Eq ( Lit ( Char 'x' ) ) ( Ref ( Local ( Name "x" ) ) ( 0 ) ) ) )
                ( IfThenElse
                  ( Prim
                    ( Eq
                      ( Lit ( String "Golden.TestCaseStatements.J" ) )
                      ( Prim ( ReflectCtor ( Ref ( Local ( Name "m" ) ) ( 0 ) ) ) )
                    )
                  )
                  ( IfThenElse
                    ( Prim
                      ( Eq
                        ( Lit ( String "Golden.TestCaseStatements.N" ) )
                        ( Prim ( ReflectCtor ( Ref ( Local ( Name "n" ) ) ( 0 ) ) ) )
                      )
                    )
                    ( ArrayIndex ( Ref ( Local ( Name "m" ) ) ( 0 ) ) ( 0 ) )
                    ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                  )
                  ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
                )
                ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
              )
            )
          )
        )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "b" }, Lit
        ( Char 'b' )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "a" }, Lit
        ( Integer 1 )
      ), Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestCaseStatements", qnameName = Name "c" }, Let
        ( Standalone
          ( Name "v", Abs ( ParamUnused )
            ( IfThenElse
              ( Prim
                ( Eq
                  ( Lit ( Integer 2 ) )
                  ( Ref ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 ) )
                )
              )
              ( IfThenElse
                ( App
                  ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                  ( Lit ( Integer 0 ) )
                )
                ( Lit ( Integer 10 ) )
                ( IfThenElse
                  ( Prim
                    ( Eq
                      ( Lit ( Integer 3 ) )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                    )
                  )
                  ( IfThenElse
                    ( App
                      ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                    )
                    ( Ref
                      ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                    )
                    ( IfThenElse
                      ( Prim
                        ( Eq
                          ( Lit ( Integer 4 ) )
                          ( Ref
                            ( Imported
                              ( ModuleName "Golden.TestCaseStatements" )
                              ( Name "a" )
                            ) ( 0 )
                          )
                        )
                      )
                      ( IfThenElse
                        ( App
                          ( Ref
                            ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 )
                          )
                          ( Ref
                            ( Imported
                              ( ModuleName "Golden.TestCaseStatements" )
                              ( Name "a" )
                            ) ( 0 )
                          )
                        )
                        ( Ref
                          ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                        )
                        ( Lit ( Integer 0 ) )
                      )
                      ( Lit ( Integer 0 ) )
                    )
                  )
                  ( IfThenElse
                    ( Prim
                      ( Eq
                        ( Lit ( Integer 4 ) )
                        ( Ref
                          ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                        )
                      )
                    )
                    ( IfThenElse
                      ( App
                        ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                        ( Ref
                          ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                        )
                      )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                      ( Lit ( Integer 0 ) )
                    )
                    ( Lit ( Integer 0 ) )
                  )
                )
              )
              ( IfThenElse
                ( Prim
                  ( Eq
                    ( Lit ( Integer 3 ) )
                    ( Ref
                      ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                    )
                  )
                )
                ( IfThenElse
                  ( App
                    ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                    ( Ref
                      ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                    )
                  )
                  ( Ref
                    ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                  )
                  ( IfThenElse
                    ( Prim
                      ( Eq
                        ( Lit ( Integer 4 ) )
                        ( Ref
                          ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                        )
                      )
                    )
                    ( IfThenElse
                      ( App
                        ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                        ( Ref
                          ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                        )
                      )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                      ( Lit ( Integer 0 ) )
                    )
                    ( Lit ( Integer 0 ) )
                  )
                )
                ( IfThenElse
                  ( Prim
                    ( Eq
                      ( Lit ( Integer 4 ) )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                    )
                  )
                  ( IfThenElse
                    ( App
                      ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                      ( Ref
                        ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                      )
                    )
                    ( Ref
                      ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 )
                    )
                    ( Lit ( Integer 0 ) )
                  )
                  ( Lit ( Integer 0 ) )
                )
              )
            )
          ) :| []
        )
        ( IfThenElse
          ( Prim
            ( Eq
              ( Lit ( Integer 1 ) )
              ( Ref ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "a" ) ) ( 0 ) )
            )
          )
          ( IfThenElse
            ( Prim
              ( Eq
                ( Lit ( Char 'b' ) )
                ( Ref ( Imported ( ModuleName "Golden.TestCaseStatements" ) ( Name "b" ) ) ( 0 ) )
              )
            )
            ( IfThenElse
              ( Prim
                ( Eq
                  ( Lit ( Boolean True ) )
                  ( App
                    ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                    ( Lit ( Integer 2 ) )
                  )
                )
              )
              ( IfThenElse
                ( Prim
                  ( Eq
                    ( Lit ( Boolean True ) )
                    ( App
                      ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) ( 0 ) )
                      ( Lit ( Integer 1 ) )
                    )
                  )
                )
                ( Lit ( Integer 42 ) )
                ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
              )
              ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
            )
            ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
          )
          ( App ( Ref ( Local ( Name "v" ) ) ( 0 ) ) ( Lit ( Boolean True ) ) )
        )
      )
    ], uberModuleForeigns = [], uberModuleExports =
    [
      ( ModuleName "Golden.TestCaseStatements", Name "a" ),
      ( ModuleName "Golden.TestCaseStatements", Name "b" ),
      ( ModuleName "Golden.TestCaseStatements", Name "c" ),
      ( ModuleName "Golden.TestCaseStatements", Name "J" ),
      ( ModuleName "Golden.TestCaseStatements", Name "N" ),
      ( ModuleName "Golden.TestCaseStatements", Name "d" ),
      ( ModuleName "Golden.TestCaseStatements", Name "multipleGuards" )
    ]
  }