UberModule
  { uberModuleBindings =
    [ Standalone
      ( QName
        { qnameModuleName = ModuleName "Golden.TestValues", qnameName = Name "f"
        }, Abs ( Identity ParamUnused )
        ( Identity ( LiteralBool True ) )
      )
    ], uberModuleExports =
    [
      ( Name "a", LiteralInt 1 ),
      ( Name "b", LiteralChar 'b' ),
      ( Name "c", Let
        ( Standalone
          ( Identity
            ( Name "v" ), Identity
            ( Abs ( Identity ParamUnused ) ( Identity ( LiteralInt 0 ) ) )
          ) :| []
        )
        ( Identity
          ( IfThenElse
            ( Identity
              ( Eq
                ( Identity ( LiteralBool True ) )
                ( Identity
                  ( App
                    ( Identity
                      ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) 0 )
                    )
                    ( Identity ( LiteralInt 2 ) )
                  )
                )
              )
            )
            ( Identity
              ( IfThenElse
                ( Identity
                  ( Eq
                    ( Identity ( LiteralBool True ) )
                    ( Identity
                      ( App
                        ( Identity
                          ( Ref ( Imported ( ModuleName "Golden.TestValues" ) ( Name "f" ) ) 0 )
                        )
                        ( Identity ( LiteralInt 1 ) )
                      )
                    )
                  )
                )
                ( Identity ( LiteralInt 42 ) )
                ( Identity
                  ( App
                    ( Identity ( Ref ( Local ( Name "v" ) ) 0 ) )
                    ( Identity ( LiteralBool True ) )
                  )
                )
              )
            )
            ( Identity
              ( App
                ( Identity ( Ref ( Local ( Name "v" ) ) 0 ) )
                ( Identity ( LiteralBool True ) )
              )
            )
          )
        )
      ),
      ( Name "J", Ctor SumType ( TyName "M" ) ( CtorName "J" ) [ FieldName "value0" ] ),
      ( Name "N", Ctor SumType ( TyName "M" ) ( CtorName "N" ) [] ),
      ( Name "d", Abs
        ( Identity ( ParamNamed ( Name "m" ) ) )
        ( Identity
          ( Abs
            ( Identity ( ParamNamed ( Name "n" ) ) )
            ( Identity
              ( Abs
                ( Identity ( ParamNamed ( Name "x" ) ) )
                ( Identity
                  ( Let
                    ( Standalone
                      ( Identity
                        ( Name "v" ), Identity
                        ( Abs ( Identity ParamUnused )
                          ( Identity
                            ( IfThenElse
                              ( Identity
                                ( Eq
                                  ( Identity ( LiteralChar 'y' ) )
                                  ( Identity ( Ref ( Local ( Name "x" ) ) 0 ) )
                                )
                              )
                              ( Identity ( LiteralInt 0 ) )
                              ( Identity ( LiteralInt 1 ) )
                            )
                          )
                        )
                      ) :| []
                    )
                    ( Identity
                      ( IfThenElse
                        ( Identity
                          ( Eq
                            ( Identity ( LiteralChar 'x' ) )
                            ( Identity ( Ref ( Local ( Name "x" ) ) 0 ) )
                          )
                        )
                        ( Identity
                          ( IfThenElse
                            ( Identity
                              ( Eq
                                ( Identity ( LiteralString "M.J" ) )
                                ( Identity
                                  ( ReflectCtor ( Identity ( Ref ( Local ( Name "m" ) ) 0 ) ) )
                                )
                              )
                            )
                            ( Identity
                              ( IfThenElse
                                ( Identity
                                  ( Eq
                                    ( Identity ( LiteralString "M.N" ) )
                                    ( Identity
                                      ( ReflectCtor ( Identity ( Ref ( Local ( Name "n" ) ) 0 ) ) )
                                    )
                                  )
                                )
                                ( Identity
                                  ( ObjectProp
                                    ( Identity ( Ref ( Local ( Name "m" ) ) 0 ) )
                                    ( PropName "value0" )
                                  )
                                )
                                ( Identity
                                  ( App
                                    ( Identity ( Ref ( Local ( Name "v" ) ) 0 ) )
                                    ( Identity ( LiteralBool True ) )
                                  )
                                )
                              )
                            )
                            ( Identity
                              ( App
                                ( Identity ( Ref ( Local ( Name "v" ) ) 0 ) )
                                ( Identity ( LiteralBool True ) )
                              )
                            )
                          )
                        )
                        ( Identity
                          ( App
                            ( Identity ( Ref ( Local ( Name "v" ) ) 0 ) )
                            ( Identity ( LiteralBool True ) )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      ),
      ( Name "multipleGuards", LiteralInt 1 )
    ]
  }